{"version":3,"file":"dropdown-menu.directive.js","sourceRoot":"","sources":["../../../../../../libs/bulma/src/lib/dropdown/dropdown-menu.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAoB,eAAe,EAAE,SAAS,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC3G,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,QAAQ,MAAM,oBAAoB,CAAC;AAC1C,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAClE,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;;;AAU9C,MAAM,OAAO,qBAAqB;IAKhC,YAA4B,QAA2B;QAA3B,aAAQ,GAAR,QAAQ,CAAmB;QADpC,OAAE,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;QAE/C,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED,IAAuC,YAAY;QACjD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM;QACF,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC/D,CAAC;IAED,SAAS,CAAC,KAAK;QACb,IAAI,KAAK,CAAC,OAAO,KAAK,KAAK,EAAE;YACzB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;SACjD;aAAM;YACH,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACpC;IACH,CAAC;;0FA3BY,qBAAqB;0DAArB,qBAAqB;oCACf,qBAAqB;;;;;kGAD3B,YAAQ,2FAAR,qBAAiB;;;;;uFAAjB,qBAAqB;cARjC,SAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,IAAI,EAAE;oBACJ,KAAK,EAAE,eAAe;oBACtB,SAAS,EAAE,UAAU;oBACrB,WAAW,EAAE,mBAAmB;iBACnC;aACA;;sBAMc,IAAI;wBAJuB,KAAK;kBAA5C,eAAe;mBAAC,qBAAqB;YAGnB,EAAE;kBAApB,WAAW;mBAAC,IAAI;YAKoB,YAAY;kBAAlD,WAAW;mBAAC,oBAAoB","sourcesContent":["import { AfterContentInit, ContentChildren, Directive, Host, HostBinding, QueryList } from '@angular/core';\nimport { DropdownDirective } from './dropdown.directive';\nimport uniqueId from 'lodash-es/uniqueId';\nimport { DropdownItemDirective } from './dropdown-item.directive';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER } from '@angular/cdk/keycodes';\n\n@Directive({\n  selector: '[baDropdownMenu]',\n  host: {\n    class: 'dropdown-menu',\n    '(click)': '_close()',\n    '(keydown)': 'onKeydown($event)'\n}\n})\nexport class DropdownMenuDirective implements AfterContentInit {\n  @ContentChildren(DropdownItemDirective) items:\n    QueryList<DropdownItemDirective>;\n    public keyManager: FocusKeyManager<DropdownItemDirective>;\n  @HostBinding('id') id = uniqueId('dropdown-id-');\n  constructor(@Host() private dropdown: DropdownDirective) {\n    this.dropdown.menu = this;\n}\n\n@HostBinding('attr.aria-controls') get ariaControls() {\n  return this.dropdown.menu.id;\n}\n\n_close() {\n    this.dropdown.open = false;\n}\n\nngAfterContentInit() {\n  this.keyManager = new FocusKeyManager(this.items).withWrap();\n}\n\nonKeydown(event) {\n  if (event.keyCode === ENTER) {\n      this.dropdown.toggle.el.nativeElement.focus();\n  } else {\n      this.keyManager.onKeydown(event);\n  }\n}\n\n}\n"]}